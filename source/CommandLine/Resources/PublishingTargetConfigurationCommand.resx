<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCommandExampleDescriptionNamedArguments" xml:space="preserve">
    <value>Add a publishing target to the publishing target configuration (using named arguments).</value>
  </data>
  <data name="AddCommandExampleDescriptionPositionalArguments" xml:space="preserve">
    <value>Add a publishing target to the publishing target configuration (using positional arguments).</value>
  </data>
  <data name="AddCommandInvalidArgumentCountMessageTemplate" xml:space="preserve">
    <value>The "{0}" command requires {1} parameters. The name of the publishing configuration and the url.</value>
  </data>
  <data name="ArgumentDescriptionPublishConfigurationName" xml:space="preserve">
    <value>The name of the publishing configuration (e.g. "Nuget Gallery")</value>
  </data>
  <data name="ArgumentDescriptionPublishingTargetActionTemplate" xml:space="preserve">
    <value>The action to perform ({0}).</value>
  </data>
  <data name="ArgumentDescriptionPublishLocation" xml:space="preserve">
    <value>The publishing location/url (e.g "https://nuget.org/api/v2/", "C:\local-nuget-repository").</value>
  </data>
  <data name="CommandDescriptionText" xml:space="preserve">
    <value>Add, remove or reset the publishing configuration.</value>
  </data>
  <data name="DeleteCommandExampleDescriptionPositionalArguments" xml:space="preserve">
    <value>Remove the publishing configuration which matches the supplied name (using positional arguments).</value>
  </data>
  <data name="DeletePublishingConfigurationFailedMessageTemplate" xml:space="preserve">
    <value>The publishing configuration "{0}" could not be removed.</value>
  </data>
  <data name="DeletePublishingConfigurationNoNameSuppliedMessage" xml:space="preserve">
    <value>You must specify the name of the publishing configuration you want to delete from your configuration.</value>
  </data>
  <data name="DeletePublishingConfigurationSucceededMessageTemplate" xml:space="preserve">
    <value>The publishing configuration "{0}" has been successfully removed from your configuration.</value>
  </data>
  <data name="InvalidActionNameMessageTemplate" xml:space="preserve">
    <value>You must use one of these actions: {0}.</value>
  </data>
  <data name="ListCommandExampleDescription" xml:space="preserve">
    <value>List all publishing configurations.</value>
  </data>
  <data name="ListPublishingConfigurationsNoConfigsAvailableMessage" xml:space="preserve">
    <value>There are currently no publishing targets configured.</value>
  </data>
  <data name="PublishingConfigurationTableHeadlineColumn1" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PublishingConfigurationTableHeadlineColumn2" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="ResetCommandExampleDescription" xml:space="preserve">
    <value>Reset your publishing configuration.</value>
  </data>
  <data name="ResetPublishingConfigurationFailedMessage" xml:space="preserve">
    <value>Resetting your publishing configuration failed.</value>
  </data>
  <data name="ResetPublishingConfigurationSuccessMessage" xml:space="preserve">
    <value>Your publishing configuration has been reset successfully.</value>
  </data>
  <data name="SamplePublishingTargetName" xml:space="preserve">
    <value>Nuget Gallery</value>
  </data>
  <data name="SavePublishingConfigurationFailedMessageTemplate" xml:space="preserve">
    <value>Saving the publishing configuration with the name "{0}" and the location "{1}" failed.</value>
  </data>
  <data name="SavePublishingConfigurationSucceededMessageTemplate" xml:space="preserve">
    <value>The publishing configuration with the name "{0}" and the location "{1}" has been successfully saved.</value>
  </data>
  <data name="ArgumentDescriptionApiKey" xml:space="preserve">
    <value>The API key for the publishing target (only required for remote targets).</value>
  </data>
</root>