<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CopyFileExceptionMessageTemplate" xml:space="preserve">
    <value>Unable to copy file "{0}" to "{1}". {2}</value>
  </data>
  <data name="CopyFileIOExceptionMessageTemplate" xml:space="preserve">
    <value>Unable to copy file "{0}" to "{1}", because either the source or the target file is being used by another process. {2}</value>
  </data>
  <data name="CopyFileSourceFileDoesNotExistMessageTemplate" xml:space="preserve">
    <value>You cannot copy a file if the source file does not exist ({0}).</value>
  </data>
  <data name="CopyFileSourceFileIsNullOrEmpty" xml:space="preserve">
    <value>You cannot copy a file if you don't specify a source file.</value>
  </data>
  <data name="CopyFileTargetFileIsNullOrEmpty" xml:space="preserve">
    <value>You cannot copy a file if you don't specify a target file.</value>
  </data>
  <data name="CreateDirectoryExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot create directory "{0}". {1}</value>
  </data>
  <data name="CreateDirectoryPathAlreadyExistsMessageTemplate" xml:space="preserve">
    <value>The directory you are trying to create does already exist: {0}</value>
  </data>
  <data name="CreateDirectoryPathIsNullOrEmptyMessage" xml:space="preserve">
    <value>You cannot create a directory if you don't specify a file path.</value>
  </data>
  <data name="DeleteFileDoesNotExistMessageTemplate" xml:space="preserve">
    <value>The file you are trying to delete does not exist ({0}).</value>
  </data>
  <data name="DeleteFileExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot delete file "{0}". {1}</value>
  </data>
  <data name="DeleteFileIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot delete file "{0}" because it is being used. {1}</value>
  </data>
  <data name="DeleteFilePathIsNullOrEmptyMessage" xml:space="preserve">
    <value>You cannot delete a file if you don't specify a file name or path.</value>
  </data>
  <data name="DeleteFolderDoesNotExistMessageTemplate" xml:space="preserve">
    <value>The folder you are trying to delete does not exist ({0}).</value>
  </data>
  <data name="DeleteFolderExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot delete folder "{0}". {1}</value>
  </data>
  <data name="DeleteFolderIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot delete folder "{0}" because one or more files in it are being used. {1}</value>
  </data>
  <data name="DeleteFolderPathIsNullOrEmptyMessage" xml:space="preserve">
    <value>You cannot delete a folder if you don't specify a path.</value>
  </data>
  <data name="EnsureParentDirectoryExistsExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot create create path "{0}". {1}</value>
  </data>
  <data name="EnsureParentDirectoryExistsPathIsNullOrEmpty" xml:space="preserve">
    <value>You cannot call EnsureParentDirectoryExists if you don't specify a path.</value>
  </data>
  <data name="GetFileContentDoesNotExistMessageTemplate" xml:space="preserve">
    <value>The file you are trying to get the content from does not exist ({0}).</value>
  </data>
  <data name="GetFileContentExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot read the contents of the file "{0}". {1}</value>
  </data>
  <data name="GetFileContentIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot read the contents of the file "{0}" because it is being written to by another process. {1}</value>
  </data>
  <data name="GetFileContentPathIsNullOrEmptyMessage" xml:space="preserve">
    <value>You cannot retrieve the content of a file if you don't specify a file name.</value>
  </data>
  <data name="GetNewFileStreamExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot open a stream for the file "{0}". {1}</value>
  </data>
  <data name="GetNewFileStreamIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot open a stream for the file "{0}" because the file is being used by another process. {1}</value>
  </data>
  <data name="GetNewFileStreamPathIsNullOrEmpty" xml:space="preserve">
    <value>You cannot request a file stream if you don't specify a file path.</value>
  </data>
  <data name="GetTextReaderDoesNotExistMessageTemplate" xml:space="preserve">
    <value>You cannot request a TextReader for a file that does not exist ({0}).</value>
  </data>
  <data name="GetTextReaderExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot create a TextReader for the file "{0}". {1}</value>
  </data>
  <data name="GetTextReaderIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot create a TextReader for the file "{0}" because it is being written to by another process. {1}</value>
  </data>
  <data name="GetTextReaderPathIsNullOrEmptyMessage" xml:space="preserve">
    <value>You cannot request a TextReader if you don't specify a file name.</value>
  </data>
  <data name="GetTextWriterExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot create a TextWriter for the file "{0}". {1}</value>
  </data>
  <data name="GetTextWriterIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot create a TextWriter for the file "{0}" because the file is being used by another process. {1}</value>
  </data>
  <data name="GetTextWriterPathIsNullOrEmpty" xml:space="preserve">
    <value>For writing to a file you should supply a file path that is not null or empty.</value>
  </data>
  <data name="MoveFileExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot move file "{0}" to "{1}". {2}</value>
  </data>
  <data name="MoveFilePathIsNullOrEmptyMessage" xml:space="preserve">
    <value>You cannot move a file if you don't specify a target path.</value>
  </data>
  <data name="MoveFileSourceFileDoesNotExistMessageTemplate" xml:space="preserve">
    <value>Before moving a file please make sure that the source file exists (Source: {0}, Target: {1}).</value>
  </data>
  <data name="WriteContentToFileContentIsNullMessageTemplate" xml:space="preserve">
    <value>The content you are trying to write to "{0}" is null.</value>
  </data>
  <data name="WriteContentToFileExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot write content to "{0}". {1}</value>
  </data>
  <data name="WriteContentToFileIOExceptionMessageTemplate" xml:space="preserve">
    <value>Cannot write content to "{0}" because the file is being used by another process. {1}</value>
  </data>
  <data name="WriteContentToFilePathIsNullOrEmptyMessage" xml:space="preserve">
    <value>For writing to a file you should supply a file path that is not null or empty.</value>
  </data>
</root>